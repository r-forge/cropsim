// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// lintul3
NumericMatrix lintul3(List crop, DataFrame weather, List soil, List control);
RcppExport SEXP _Rlintul_lintul3(SEXP cropSEXP, SEXP weatherSEXP, SEXP soilSEXP, SEXP controlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type crop(cropSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type weather(weatherSEXP);
    Rcpp::traits::input_parameter< List >::type soil(soilSEXP);
    Rcpp::traits::input_parameter< List >::type control(controlSEXP);
    rcpp_result_gen = Rcpp::wrap(lintul3(crop, weather, soil, control));
    return rcpp_result_gen;
END_RCPP
}
// lintul0
NumericMatrix lintul0(List crop, DataFrame weather, List control);
RcppExport SEXP _Rlintul_lintul0(SEXP cropSEXP, SEXP weatherSEXP, SEXP controlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type crop(cropSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type weather(weatherSEXP);
    Rcpp::traits::input_parameter< List >::type control(controlSEXP);
    rcpp_result_gen = Rcpp::wrap(lintul0(crop, weather, control));
    return rcpp_result_gen;
END_RCPP
}
// lintul1
NumericMatrix lintul1(List crop, DataFrame weather, List control);
RcppExport SEXP _Rlintul_lintul1(SEXP cropSEXP, SEXP weatherSEXP, SEXP controlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type crop(cropSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type weather(weatherSEXP);
    Rcpp::traits::input_parameter< List >::type control(controlSEXP);
    rcpp_result_gen = Rcpp::wrap(lintul1(crop, weather, control));
    return rcpp_result_gen;
END_RCPP
}
// lintul2
NumericMatrix lintul2(List crop, DataFrame weather, List soil, List control);
RcppExport SEXP _Rlintul_lintul2(SEXP cropSEXP, SEXP weatherSEXP, SEXP soilSEXP, SEXP controlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type crop(cropSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type weather(weatherSEXP);
    Rcpp::traits::input_parameter< List >::type soil(soilSEXP);
    Rcpp::traits::input_parameter< List >::type control(controlSEXP);
    rcpp_result_gen = Rcpp::wrap(lintul2(crop, weather, soil, control));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_LINTUL2();
RcppExport SEXP _rcpp_module_boot_LINTUL1();

static const R_CallMethodDef CallEntries[] = {
    {"_Rlintul_lintul3", (DL_FUNC) &_Rlintul_lintul3, 4},
    {"_Rlintul_lintul0", (DL_FUNC) &_Rlintul_lintul0, 3},
    {"_Rlintul_lintul1", (DL_FUNC) &_Rlintul_lintul1, 3},
    {"_Rlintul_lintul2", (DL_FUNC) &_Rlintul_lintul2, 4},
    {"_rcpp_module_boot_LINTUL2", (DL_FUNC) &_rcpp_module_boot_LINTUL2, 0},
    {"_rcpp_module_boot_LINTUL1", (DL_FUNC) &_rcpp_module_boot_LINTUL1, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_Rlintul(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
